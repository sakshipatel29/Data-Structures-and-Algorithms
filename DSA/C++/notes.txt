to check length: str.size()
to check minimum: min(x,y);
to check maximum: max(x,y);

Type of functions:

1. Void: Does not Return anything.
example: void printName() {
    cout << "Hello Girl!";
}
2. Return: Returns a parameter passed by user.
example: int printSum(int a, int b) {
    cout << "sum is: " << a + b ;
    return a + b;
}

3. Parameterised: 
example: void printName(string name) {
    cout << "Hello Girl!" << name;
}

4. Non-Parameterised: Does not include any parameter.

--------

1. Pass by value:
--> it takes the copy of the number in the function.
example:
void doSomething(int i){
    cout << i << endl;
    i = i + 18;
    cout << i << endl;
}

int main(){
    int i = 10;
    doSomething(i);
    cout << i << endl;
    return 0;
}

2. Pass by Reference:
--> it takes the original number in function.
example:

void doSomething(int &i){
    cout << i << endl;
    i = i + 18;
    cout << i << endl;
}

int main(){
    int i = 10;
    doSomething(i);
    cout << i << endl;
    return 0;
}

--> When we pass Array, even without & it will go by Reference only.


C++ STL has 4 parts:
algorithm
container
function
iteration

i. pair:

pair<int, int> p = {1,3}

p.first = 1

p = {1, {3,4}}

p.second.second = 4

ii. vector:

arrays have constant size and vector doesnt

vector<int> v;

v.push_back(1);
v.emplace_back(2);


Iterators:

vector<int>::iterator it = v.begin(); 
--> points to first location in memory

*(it) --> value at location


vector<int>::iterator it = v.end();
--> if we do it--, it will go to last memory location of it



vector<int>::iterator it = v.rend();
--> reverse end: so immidiate before first in vector

vector<int>::iterator it = v.begin();
--> reverse and first one

v.erase(v.begin()+1)
v.insert(v.begin() + 1, 2, 100);
v.swap
v.clear
v.pop_back

iii. List:

list is same as vector but it give front operations too.

List<int> ls 
O(logn)

ls.push_back
ls.emplace_back
ls.push_front
ls.emplace_front

deque
stack
queue
priority queue --> max heap
minimum priority wueue --> min heap

set ---- sorted unique
multiset ----- sorted
unordered set ---- unique
o(1)

Map: Map<int int> mpp--- stores unique keys in sorted order

algorithms:

1. Sort ---> sort(a,a+n) [start included last not]

sort(a,a+n, greater<int>) -- > descending

